Explanation: 

Part 1 Command Execution 
-----------------------------------------
Given the command (ecmd->argv[0]), we use execvp() to execute it. 

In our program, execvp() takes in two arguments: 
	(1) a filename or pathname 
	(2) a pointer to the list of arguments 
The first argument specifies the filename of the executable such as 'wc' or 'ls'. Given the filename, the function will search the directories listed in the PATH environment variable. According to the man page, "search path [of execvp()] is the path specified in the environment by “PATH” variable." 


Part 2 I/O Redirection 
-----------------------------------------
Depending on rcmd->type, we want to open the file in the rcmd struct using different access modes and permission levels. 

if >, we want to open file with O_CREAT | O_WRONLY | O_TRUNC flags. This allows us to create a new file if the given pathname does not exist. If the file does exist and its access mode allows writing, it will "truncate" it to zero bytes, erasing everything that is already in the file.
The permission level is set to S_IWUSR, since we only want the owner of the file to write to it. 

If <, we want to set the access mode to O_RDONLY because the program only needs to read data from the file. The group permission is set to S_IRUSR since we only want the owner to read from this file. 

open() will return the file descriptor of the opened file. On success, we update rcmd->fd to be the fd of the newly opened file so that when we execute the command, the output can be directed into the newly opened file. After we finish executing the command, we close the file descriptor. 


Part 3 Pipes
-----------------------------------------
In the parent process, we first create a pipe by calling pipe(p) where p is an int array of two elements. p[0] is the fd to read from, and p[1] is the fd to write to. 

	WRITE p[1] ======== p[0] READ 

The parent forks twice, spawning two child processes in total. The parent's file descriptor table is replicated in the child. So all its children will have access to the pipe. 


	Child1 ====> 1 |  p[1] <====> p[0] | 0 <==== Child 2 
			
In the first fork, the first child first closes the read end of the pipe since it does not need to read anything from the pipe. Then it changes STDOUT to be the pipe's write end so when the executing program writes to STDOUT, it will actually write to the pipe's write end. This is done via dup2(). Then the child process runs the command on the left side and outputs it to the write end of the pipe. Execvp() replaces the program in the child process with the new executable. 

The second child first closes the write end of the pipe since it does not need to write anything to the pipe. It changes STDIN to be the pipe's read end. Again, this is done via dup2(). A read from p[0] accesses the data written to p[1]. It will wait until some data come in. Then the child process runs the command on the right side using the input it reads from the pipe, which appears to the second child as if it's coming directly from STDIN.

The parent process is blocked until two child processes finish and their exit code is reaped. The parent closes the pipe and exits after reaping the exit codes. 
 
